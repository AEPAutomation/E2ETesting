<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Template" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="csvEnv" elementType="Argument">
            <stringProp name="Argument.name">csvEnv</stringProp>
            <stringProp name="Argument.value">./Interface_ENVIRONMENT.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csvApi" elementType="Argument">
            <stringProp name="Argument.name">csvApi</stringProp>
            <stringProp name="Argument.value">./Interface_INPUTS.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputPath" elementType="Argument">
            <stringProp name="Argument.name">outputPath</stringProp>
            <stringProp name="Argument.value">${__P(outputPath,./result/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userName" elementType="Argument">
            <stringProp name="Argument.name">userName</stringProp>
            <stringProp name="Argument.value">${__P(userName,default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testTime" elementType="Argument">
            <stringProp name="Argument.name">testTime</stringProp>
            <stringProp name="Argument.value">${__P(testTime,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="interface" elementType="Argument">
            <stringProp name="Argument.name">interface</stringProp>
            <stringProp name="Argument.value">${__P(interface)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Retrieve variable value from ENVIRONMENT.csv file" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1545180565000</longProp>
        <longProp name="ThreadGroup.end_time">1545180565000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Environment Data" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">${csvEnv}</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">key,value</stringProp>
          <stringProp name="TestPlan.comments">Get environment data from csv</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Store environment to golobal variables" enabled="true">
          <stringProp name="TestPlan.comments">Store environment to golobal variables</stringProp>
          <stringProp name="BeanShellSampler.query">String key = vars.get(&quot;key&quot;);
String value = vars.get(&quot;value&quot;);
props.put(key,value);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">10000</stringProp>
        <stringProp name="ThreadGroup.delay">30</stringProp>
        <longProp name="ThreadGroup.start_time">1544594443000</longProp>
        <longProp name="ThreadGroup.end_time">1544594443000</longProp>
        <stringProp name="TestPlan.comments">One api interact with other api</stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="InitThread" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.sql.*;
import java.text.SimpleDateFormat;
public static String generateRandomString(int len) {
	String ret = &quot;&quot;;

	while(true) {
		int ci = (int)(Math.random()*123);
		if((ci &lt;= 57 &amp;&amp; ci &gt;= 48) || (ci &lt;= 90 &amp;&amp; ci &gt;= 65) || (ci &lt;= 122 &amp;&amp; ci &gt;= 97)) {
			char ch = (char) ci;
			ret = ret + ch;
		}
		
		if(ret.length() &gt;= len) {
			break;
		}
	}
	
	return ret;
}

// init guid
String guid = generateRandomString(10);
vars.put(&quot;guid&quot;,guid);



//////init timestamp
 public static String stampToDate(String s){
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
        long lt = new Long(s);
        Date date = new Date(lt);
        res = simpleDateFormat.format(date);
        return res;
}

Timestamp ts = new Timestamp(System.currentTimeMillis());
String collectedTimeStamp = ts.toString().substring(0,10);

String value = String.valueOf(System.currentTimeMillis());
String dateValue = stampToDate(value);
vars.put(&quot;collectedTimeStamp&quot;, dateValue);

System.out.println(&quot;-----------&quot;);
System.out.println(dateValue);

System.out.println(&quot;Interface: &quot;+vars.get(&quot;interface&quot;));

//init environment variables from csv
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Input Data" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">${csvApi}</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">name,protocol,method,host,port,path,body,headers,outputs,expected_code,expected_result,run_flag,constant_timer</stringProp>
          <stringProp name="TestPlan.comments">API input data, including api name, protocol, method, host,  port, path, headers, body and expect result</stringProp>
        </CSVDataSet>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if run_flag is not false, send user customized request1" enabled="true">
          <stringProp name="IfController.condition">&quot;${run_flag}&quot; != &quot;FALSE&quot; &amp;&amp; &quot;${run_flag}&quot; != &quot;false&quot; &amp;&amp; &quot;${protocol}&quot; == &quot;USER1&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="1 Process Variables in input parameters" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">public static String processVariables(String value) {
	if(value == null || value ==&quot;&quot;||value.trim().length() == 0 ) {
		return &quot;&quot;;
	}

	while(value.contains(&quot;${&quot;) == true) {
		String vPattern = value.substring(value.indexOf(&quot;${&quot;), value.indexOf(&quot;}&quot;, value.indexOf(&quot;${&quot;)) + 1).trim();
		String v = vPattern.substring(2, vPattern.length() - 1).trim();
		String vValue = props.get(v);	
		if(vValue == null){
			vValue = vars.get(v) == null ? &quot;&quot; : vars.get(v);
		}
		vars.put(&quot;vValue&quot;,vValue);
		value = value.substring(0, value.indexOf(vPattern)) + vValue + value.substring(value.indexOf(vPattern) + vPattern.length());	
	}	
	return value;
}


// process &quot;headers&quot;
String headers = vars.get(&quot;headers&quot;);
headers = processVariables(headers);
vars.put(&quot;headers&quot;, headers);

// process &quot;path&quot;
String path = vars.get(&quot;path&quot;);
path = processVariables(path);
vars.put(&quot;path&quot;, path);

// process &quot;host&quot;
String host = vars.get(&quot;host&quot;);
host = processVariables(host);
vars.put(&quot;host&quot;, host);

// process &quot;body&quot;
String body = vars.get(&quot;body&quot;);
body = processVariables(body);
vars.put(&quot;body&quot;, body);

// process &quot;outputs&quot;
String outputs = vars.get(&quot;outputs&quot;);
outputs = processVariables(outputs);
vars.put(&quot;outputs&quot;, outputs);

// process &quot;expected_code&quot;
String expected_code = vars.get(&quot;expected_code&quot;);
expected_code = processVariables(expected_code);
vars.put(&quot;expected_code&quot;, expected_code);

// process &quot;expected_result&quot;
String expected_result = vars.get(&quot;expected_result&quot;);
expected_result = processVariables(expected_result);
vars.put(&quot;expected_result&quot;, expected_result);

// process &quot;constant_timer&quot;
String constant_timer = vars.get(&quot;constant_timer&quot;);
constant_timer = processVariables(constant_timer);
vars.put(&quot;constant_timer&quot;, constant_timer);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="2 Parameters Update" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String headers = vars.get(&quot;headers&quot;);
int hcount = 0;

if(value != &quot;&quot; &amp;&amp; headers.trim().length() != 0){
	String[] headerArray = headers.split(&quot;\n&quot;);
	hcount = headerArray.length;

for (int i = 0; i &lt; headerArray.length; i++) {
	String header = headerArray[i];
	if (header == null || header.trim().length() == 0 ||header ==&quot;&quot;) {
		hcount--;
		continue;
	}

	if(header.indexOf(&quot;:&quot;) == -1){
		hcount--;
		continue;
	}
	String headerName = header.substring(0, header.indexOf(&quot;:&quot;));
	
	String headerValue = &quot;&quot;;
	
	if (header.indexOf(&quot;:&quot;) &lt; header.trim().length() - 1) {
		headerValue = header.substring(header.indexOf(&quot;:&quot;) + 1).trim();
		
	}
	vars.put(headerName,headerValue);

}

//TODO update the logic
}
String method = vars.get(&quot;method&quot;);
if(method != null &amp;&amp; method.trim().length()&gt;0) {
	if(method.equalsIgnoreCase(&quot;get&quot;)) {
		vars.put(&quot;body&quot;, &quot;&quot;);
	} 
}


//outputs

String outputs = vars.get(&quot;outputs&quot;);
int count = 0;
if(outputs != null &amp;&amp; outputs.trim().length()&gt;0) {
	String[] outputsArray = outputs.split(&quot;\n&quot;);
     count = outputsArray.length;
	for (int i = 1; i &lt;= outputsArray.length; i++) {
		String output = outputsArray[i-1];
		if (output == null || output.trim().length() == 0) {
			count--;
			continue;
		}
		vars.put(&quot;output_&quot;+i, output);
	}
}

vars.put(&quot;count&quot;,count.toString());
for(int i=count+1;i&lt;=10;i++) {
	vars.put(&quot;output_&quot;+i, null);
}


</stringProp>
            <stringProp name="TestPlan.comments">Update hearders, body,outputs</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait special time before request" enabled="true">
            <stringProp name="ConstantTimer.delay">${constant_timer}</stringProp>
          </ConstantTimer>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="4 ResultOutput" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//////////////////////////////////////////////////////////////////////////////////////////////////////
//This beanshell is used to store test result to json file, use can cumtomize it.
////////////////////////////////////////////////////////////////////////////////////////////////////

import com.google.gson.JsonObject;
import java.text.SimpleDateFormat;

JsonObject outputJson = new JsonObject();

///////////////////////////////////////////////////////////////////////////////////////////////////
////format date///////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
 public static String stampToDate(String s){
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        long lt = new Long(s);
        Date date = new Date(lt);
        res = simpleDateFormat.format(date);
        return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////TO ADD OUT PUT HERE////////////////////////////////////////////////////////////////////////////
////use need to customize the out put/////////////////////////////////////////////////////////////
String case_result = &quot;&quot;;
String case_message = &quot;&quot;;
String value = String.valueOf(System.currentTimeMillis());
String dateValue = stampToDate(value);
outputJson.addProperty(&quot;Case Name&quot;,  vars.get(&quot;name&quot;));
outputJson.addProperty(&quot;Result&quot;, case_result);
outputJson.addProperty(&quot;Message&quot;, case_message);
outputJson.addProperty(&quot;testTime&quot;, vars.get(&quot;testTime&quot;));
outputJson.addProperty(&quot;@timestamp&quot;, dateValue);

///////////////////////////////////////////////////////////////////////////////////////////////////
////Generate json file in outputPath//////////////////////////////////////////////////////////////
//// DO NOT MODIFY THE CODE BELOW////////////////////////////////////////////////////////////////
public static void writeResult() 
{
	String getdata = outputJson.toString();
	String casename = vars.get(&quot;name&quot;).replaceAll(&quot; &quot;,&quot;&quot;);   

	String key = String.valueOf(System.currentTimeMillis());
	String outputPath = vars.get(&quot;outputPath&quot;);
	File dir = new File(outputPath);
	if(dir.exists() == true){
		System.out.println(&quot;dirs is exists&quot;);
	}else{
		dir.mkdirs();
		System.out.println(&quot; created dirs&quot;);
	}

	print(&quot;outputPath=&quot;+outputPath);
	if(outputPath.endsWith(&quot;/&quot;) == false) {
		outputPath = outputPath + &quot;/&quot;;
	}
	String filename = outputPath+casename+&quot;_&quot;+key+&quot;.json&quot;;
	print(&quot;filename=&quot;+filename);
	FileWriter writer;
	        try {
	            writer = new FileWriter(filename);
	            writer.write(getdata);
	            writer.flush();
	            writer.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
}
writeResult();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if run_flag is not false, send JDBC request" enabled="true">
          <stringProp name="IfController.condition">&quot;${run_flag}&quot; != &quot;FALSE&quot; &amp;&amp; &quot;${run_flag}&quot; != &quot;false&quot; &amp;&amp; &quot;${protocol}&quot; == &quot;JDBC&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="${name}" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.sql.*;
import java.util.*;
import java.lang.*;
import org.apache.regexp.*;
import com.google.gson.JsonObject;  
import com.google.gson.JsonParser;
import java.io.*;
import com.ibm.json.JsonUtil;
import com.ibm.json.JsonResult;
import java.text.SimpleDateFormat;
import com.google.gson.JsonArray;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONObject;

String ip=vars.get(&quot;host&quot;);
String port=vars.get(&quot;port&quot;);
String database=vars.get(&quot;path&quot;);

//String sqlserver_ip=props.get(&quot;sqlserver_ip&quot;);
//String sqlserver_port=props.get(&quot;sqlserver_port&quot;);
//String sqlserver_database=props.get(&quot;sqlserver_database&quot;);

String method=vars.get(&quot;method&quot;);
String query = vars.get(&quot;body&quot;);
String user = vars.get(&quot;Username&quot;);
String pass = vars.get(&quot;Password&quot;);

vars.put(&quot;TEST1&quot;, user);
vars.put(&quot;TEST2&quot;, pass);

String drive = &quot;&quot;;
String url = &quot;&quot;;

if (&quot;DB2&quot;.equals(method)) {
	drive = &quot;com.ibm.db2.jcc.DB2Driver&quot;;
	url = &quot;jdbc:db2://&quot;+ip+&quot;:&quot;+port+&quot;/&quot;+database;
	}
if (&quot;SQL&quot;.equals(method)) {
	drive = &quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;;
	url = &quot;jdbc:sqlserver://&quot;+ip+&quot;:&quot;+port+&quot;;databaseName=&quot;+database;
	}

String query_result = &quot;&quot;;
String query_type = &quot;&quot;;

Connection Mycon = null;
Statement Mystmt = null;
ResultSet Myrset = null;

try{
	Mycon = DriverManager.getConnection(url,user,pass);
	}catch(SQLException e){
		throw e.SQLException;		
	}
Mystmt = Mycon.createStatement();

if (&quot;select&quot;.equals(query.substring(0,6)) || &quot;Select&quot;.equals(query.substring(0,6)) || &quot;SELECT&quot;.equals(query.substring(0,6))) {
	try{
		query_type = &quot;select&quot;;
		Myrset = Mystmt.executeQuery(query);
		while (Myrset.next()){
			query_result = Myrset.getString(1);
			vars.put(&quot;query_result&quot;, query_result);
			vars.put(&quot;query_type&quot;, query_type);
			}
		}catch(SQLException e){
			throw e.SQLException;
			}
}else{
	try{
		query_type = &quot;update&quot;;
		Mystmt.executeUpdate(query);
		int update_count1 = Mystmt.getUpdateCount();
		String update_count = update_count1.toString();
		vars.put(&quot;update_count&quot;, update_count);
		vars.put(&quot;query_type&quot;, query_type);
		return update_count;
		}catch(SQLException e){
			throw e.SQLException;
			}
	}

Myrset.close();
Mystmt.close();
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="1 Process Variables in input parameters" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">public static String processVariables(String value) {
	if(value == null || value ==&quot;&quot;||value.trim().length() == 0 ) {
		return &quot;&quot;;
	}

	while(value.contains(&quot;${&quot;) == true) {
		String vPattern = value.substring(value.indexOf(&quot;${&quot;), value.indexOf(&quot;}&quot;, value.indexOf(&quot;${&quot;)) + 1).trim();
		String v = vPattern.substring(2, vPattern.length() - 1).trim();
		String vValue = props.get(v);	
		if(vValue == null){
			vValue = vars.get(v) == null ? &quot;&quot; : vars.get(v);
		}
		vars.put(&quot;vValue&quot;,vValue);
		value = value.substring(0, value.indexOf(vPattern)) + vValue + value.substring(value.indexOf(vPattern) + vPattern.length());	
	}	
	return value;
}

// process &quot;headers&quot;
String headers = vars.get(&quot;headers&quot;);
headers = processVariables(headers);
vars.put(&quot;headers&quot;, headers);

// process &quot;path&quot;
String path = vars.get(&quot;path&quot;);
path = processVariables(path);
vars.put(&quot;path&quot;, path);

// process &quot;host&quot;
String host = vars.get(&quot;host&quot;);
host = processVariables(host);
vars.put(&quot;host&quot;, host);

// process &quot;body&quot;
String body = vars.get(&quot;body&quot;);
body = processVariables(body);
vars.put(&quot;body&quot;, body);

// process &quot;outputs&quot;
String outputs = vars.get(&quot;outputs&quot;);
outputs = processVariables(outputs);
vars.put(&quot;outputs&quot;, outputs);

// process &quot;expected_code&quot;
String expected_code = vars.get(&quot;expected_code&quot;);
expected_code = processVariables(expected_code);
vars.put(&quot;expected_code&quot;, expected_code);

// process &quot;expected_result&quot;
String expected_result = vars.get(&quot;expected_result&quot;);
expected_result = processVariables(expected_result);
vars.put(&quot;expected_result&quot;, expected_result);

// process &quot;constant_timer&quot;
String constant_timer = vars.get(&quot;constant_timer&quot;);
constant_timer = processVariables(constant_timer);
vars.put(&quot;constant_timer&quot;, constant_timer);</stringProp>
              <stringProp name="TestPlan.comments">process all variables in input parameters</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="2 Parameters Update" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String headers = vars.get(&quot;headers&quot;);
int hcount = 0;

if(value != &quot;&quot; &amp;&amp; headers.trim().length() != 0){
	String[] headerArray = headers.split(&quot;\n&quot;);
	hcount = headerArray.length;

for (int i = 0; i &lt; headerArray.length; i++) {
	String header = headerArray[i];
	if (header == null || header.trim().length() == 0 ||header ==&quot;&quot;) {
		hcount--;
		continue;
	}

	if(header.indexOf(&quot;:&quot;) == -1){
		hcount--;
		continue;
	}
	String headerName = header.substring(0, header.indexOf(&quot;:&quot;));
	
	String headerValue = &quot;&quot;;
	
	if (header.indexOf(&quot;:&quot;) &lt; header.trim().length() - 1) {
		headerValue = header.substring(header.indexOf(&quot;:&quot;) + 1).trim();
		
	}
	vars.put(headerName,headerValue);

}

//TODO update the logic
}
String method = vars.get(&quot;method&quot;);
if(method != null &amp;&amp; method.trim().length()&gt;0) {
	if(method.equalsIgnoreCase(&quot;get&quot;)) {
		vars.put(&quot;body&quot;, &quot;&quot;);
	} 
}


//outputs

String outputs = vars.get(&quot;outputs&quot;);
int count = 0;
if(outputs != null &amp;&amp; outputs.trim().length()&gt;0) {
	String[] outputsArray = outputs.split(&quot;\n&quot;);
     count = outputsArray.length;
	for (int i = 1; i &lt;= outputsArray.length; i++) {
		String output = outputsArray[i-1];
		if (output == null || output.trim().length() == 0) {
			count--;
			continue;
		}
		vars.put(&quot;output_&quot;+i, output);
	}
}

vars.put(&quot;count&quot;,count.toString());
for(int i=count+1;i&lt;=10;i++) {
	vars.put(&quot;output_&quot;+i, null);
}


</stringProp>
              <stringProp name="TestPlan.comments">Update hearders, body,outputs</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait special time before JDBC request" enabled="true">
              <stringProp name="ConstantTimer.delay">${constant_timer}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="3 Save Response Data and Headers" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
String response = prev.getResponseDataAsString();
vars.put(&quot;response&quot;,response);

vars.put(&quot;responseHeader&quot;, prev.getResponseHeaders());</stringProp>
              <stringProp name="TestPlan.comments"> save response data and response hearder</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="4 Verify result of inserting" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONObject;

String code=prev.getResponseCode();
String queryResult = vars.get(&quot;query_result&quot;);
String queryType = vars.get(&quot;query_type&quot;);
String updateCount = vars.get(&quot;update_count&quot;);
String case_result = &quot;&quot;;
String case_message = &quot;&quot;;

if (&quot;select&quot;.equals(queryType)){
	if(&quot;200&quot;.equals(code) &amp;&amp; !&quot;&quot;.equals(queryResult) &amp;&amp; !&quot;0&quot;.equals(queryResult) &amp;&amp; queryResult != null){
		case_result = &quot;match&quot;;
		case_message = &quot;data retrieved&quot;; 
		}else{
			case_result = &quot;mismatch&quot;;
			case_message = &quot;failed connection or no data retrieved&quot;; 
			}
}else if (&quot;update&quot;.equals(queryType)){
	if(&quot;200&quot;.equals(code) &amp;&amp; !&quot;&quot;.equals(updateCount) &amp;&amp; !&quot;0&quot;.equals(updateCount) &amp;&amp; updateCount != null){
		case_result = &quot;success&quot;;
		case_message = updateCount+&quot;updated&quot;; 
		}else{
			case_result = &quot;failed&quot;;
			case_message = &quot;no data updated&quot;; 
			}
}

vars.put(&quot;caseResult&quot;, case_result);
vars.put(&quot;caseMessage&quot;, case_message);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="5 ResultOutput" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import java.text.SimpleDateFormat;

JsonObject outputJson = new JsonObject();

///////////////////////////////////////////////////////////////////////////////////////////////////
////format date///////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
 public static String stampToDate(String s){
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        long lt = new Long(s);
        Date date = new Date(lt);
        res = simpleDateFormat.format(date);
        return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////TO ADD OUT PUT HERE////////////////////////////////////////////////////////////////////////////
String value = String.valueOf(System.currentTimeMillis());
String dateValue = stampToDate(value);
outputJson.addProperty(&quot;Case Name&quot;, vars.get(&quot;name&quot;));
outputJson.addProperty(&quot;Vin&quot;, props.get(&quot;vin&quot;));
outputJson.addProperty(&quot;Request&quot;, vars.get(&quot;body&quot;));
outputJson.addProperty(&quot;Response Code&quot;, prev.getResponseCode());
outputJson.addProperty(&quot;Response Message&quot;, prev.getResponseMessage());
outputJson.addProperty(&quot;Response Data&quot;, prev.getResponseDataAsString());
outputJson.addProperty(&quot;Query Type&quot;, vars.get(&quot;query_type&quot;));
outputJson.addProperty(&quot;Result&quot;, vars.get(&quot;caseResult&quot;));
outputJson.addProperty(&quot;Message&quot;, vars.get(&quot;caseMessage&quot;));
outputJson.addProperty(&quot;testTime&quot;, vars.get(&quot;testTime&quot;));
outputJson.addProperty(&quot;@timestamp&quot;, dateValue);

///////////////////////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
public static void writeResult() 
{
	String getdata = outputJson.toString();
	String casename = vars.get(&quot;name&quot;).replaceAll(&quot; &quot;,&quot;&quot;);

	System.out.println(casename);

	String key = String.valueOf(System.currentTimeMillis());
	String outputPath = vars.get(&quot;outputPath&quot;);
	File dir = new File(outputPath);
	if(dir.exists() == true){
		System.out.println(&quot;dirs is exists&quot;);
	}else{
		dir.mkdirs();
		System.out.println(&quot; created dirs&quot;);
	}

	print(&quot;outputPath=&quot;+outputPath);
	if(outputPath.endsWith(&quot;/&quot;) == false) {
		outputPath = outputPath + &quot;/&quot;;
	}
	String filename = outputPath+casename+&quot;_&quot;+key+&quot;.json&quot;;
	print(&quot;filename=&quot;+filename);
	FileWriter writer;
	        try {
	            writer = new FileWriter(filename);
	            writer.write(getdata);
	            writer.flush();
	            writer.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
}
writeResult();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if run_flag is not false, send FTPPUT request" enabled="true">
          <stringProp name="IfController.condition">&quot;${run_flag}&quot; != &quot;FALSE&quot; &amp;&amp; &quot;${run_flag}&quot; != &quot;false&quot; &amp;&amp; &quot;${protocol}&quot; == &quot;FTP&quot; &amp;&amp; &quot;${method}&quot; == &quot;PUT&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <FTPSampler guiclass="FtpTestSamplerGui" testclass="FTPSampler" testname="${name}" enabled="true">
            <stringProp name="FTPSampler.server">${host}</stringProp>
            <stringProp name="FTPSampler.port">${port}</stringProp>
            <stringProp name="FTPSampler.filename">${path}</stringProp>
            <stringProp name="FTPSampler.localfilename"></stringProp>
            <stringProp name="FTPSampler.inputdata">${body}</stringProp>
            <boolProp name="FTPSampler.binarymode">false</boolProp>
            <boolProp name="FTPSampler.saveresponse">false</boolProp>
            <boolProp name="FTPSampler.upload">true</boolProp>
            <stringProp name="ConfigTestElement.username">${Username}</stringProp>
            <stringProp name="ConfigTestElement.password">${Password}</stringProp>
          </FTPSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="1 Process Variables in input parameters" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">public static String processVariables(String value) {
	if(value == null || value ==&quot;&quot;||value.trim().length() == 0 ) {
		return &quot;&quot;;
	}

	while(value.contains(&quot;${&quot;) == true) {
		String vPattern = value.substring(value.indexOf(&quot;${&quot;), value.indexOf(&quot;}&quot;, value.indexOf(&quot;${&quot;)) + 1).trim();
		String v = vPattern.substring(2, vPattern.length() - 1).trim();
		String vValue = props.get(v);	
		if(vValue == null){
			vValue = vars.get(v) == null ? &quot;&quot; : vars.get(v);
		}
		vars.put(&quot;vValue&quot;,vValue);
		value = value.substring(0, value.indexOf(vPattern)) + vValue + value.substring(value.indexOf(vPattern) + vPattern.length());	
	}	
	return value;
}


//String telematicsDetails = vars.get(&quot;telematicsDetails&quot;);

//String date = telematicsDetails.substring(telematicsDetails.indexOf(&quot;&lt;AUTO_RECORD_LAST_UPDT_DATE&gt;&quot;) + 28, telematicsDetails.indexOf(&quot;&lt;/AUTO_RECORD_LAST_UPDT_DATE&gt;&quot;));
//String day = date.substring(0,10);
//vars.put(&quot;retailSaleDate&quot;, day);

//String datetime = date.substring(0,19).replaceAll(&quot;T&quot;, &quot;&quot;).replaceAll(&quot;:&quot;, &quot;&quot;).replaceAll(&quot;-&quot;, &quot;&quot;);
//vars.put(&quot;datetime&quot;, datetime);

//telematicsDetails = telematicsDetails.substring(0, telematicsDetails.indexOf(&quot;&lt;AUTO_RECORD_LAST_UPDT_DATE&gt;&quot;) + 28) + day + telematicsDetails.substring(telematicsDetails.indexOf(&quot;&lt;/AUTO_RECORD_LAST_UPDT_DATE&gt;&quot;));

//vars.put(&quot;telematicsDetails&quot;, telematicsDetails);


// process &quot;headers&quot;
String headers = vars.get(&quot;headers&quot;);
headers = processVariables(headers);
vars.put(&quot;headers&quot;, headers);

// process &quot;path&quot;
String path = vars.get(&quot;path&quot;);
path = processVariables(path);
vars.put(&quot;path&quot;, path);

// process &quot;host&quot;
String host = vars.get(&quot;host&quot;);
host = processVariables(host);
vars.put(&quot;host&quot;, host);

// process &quot;body&quot;
String body = vars.get(&quot;body&quot;);
body = processVariables(body);
vars.put(&quot;body&quot;, body);

// process &quot;outputs&quot;
String outputs = vars.get(&quot;outputs&quot;);
outputs = processVariables(outputs);
vars.put(&quot;outputs&quot;, outputs);

// process &quot;expected_code&quot;
String expected_code = vars.get(&quot;expected_code&quot;);
expected_code = processVariables(expected_code);
vars.put(&quot;expected_code&quot;, expected_code);

// process &quot;expected_result&quot;
String expected_result = vars.get(&quot;expected_result&quot;);
expected_result = processVariables(expected_result);
vars.put(&quot;expected_result&quot;, expected_result);

// process &quot;constant_timer&quot;
String constant_timer = vars.get(&quot;constant_timer&quot;);
constant_timer = processVariables(constant_timer);
vars.put(&quot;constant_timer&quot;, constant_timer);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="2 Parameters Update" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String headers = vars.get(&quot;headers&quot;);
int hcount = 0;

if(value != &quot;&quot; &amp;&amp; headers.trim().length() != 0){
	String[] headerArray = headers.split(&quot;\n&quot;);
	hcount = headerArray.length;

for (int i = 0; i &lt; headerArray.length; i++) {
	String header = headerArray[i];
	if (header == null || header.trim().length() == 0 ||header ==&quot;&quot;) {
		hcount--;
		continue;
	}

	if(header.indexOf(&quot;:&quot;) == -1){
		hcount--;
		continue;
	}
	String headerName = header.substring(0, header.indexOf(&quot;:&quot;));
	
	String headerValue = &quot;&quot;;
	
	if (header.indexOf(&quot;:&quot;) &lt; header.trim().length() - 1) {
		headerValue = header.substring(header.indexOf(&quot;:&quot;) + 1).trim();
		
	}
	vars.put(headerName,headerValue);

}

//TODO update the logic
}
String method = vars.get(&quot;method&quot;);
if(method != null &amp;&amp; method.trim().length()&gt;0) {
	if(method.equalsIgnoreCase(&quot;get&quot;)) {
		vars.put(&quot;body&quot;, &quot;&quot;);
	} 
}


//outputs

String outputs = vars.get(&quot;outputs&quot;);
int count = 0;
if(outputs != null &amp;&amp; outputs.trim().length()&gt;0) {
	String[] outputsArray = outputs.split(&quot;\n&quot;);
     count = outputsArray.length;
	for (int i = 1; i &lt;= outputsArray.length; i++) {
		String output = outputsArray[i-1];
		if (output == null || output.trim().length() == 0) {
			count--;
			continue;
		}
		vars.put(&quot;output_&quot;+i, output);
	}
}

vars.put(&quot;count&quot;,count.toString());
for(int i=count+1;i&lt;=10;i++) {
	vars.put(&quot;output_&quot;+i, null);
}


</stringProp>
              <stringProp name="TestPlan.comments">Update hearders, body,outputs</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait special time before FTP request" enabled="true">
              <stringProp name="ConstantTimer.delay">${constant_timer}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="3 Save Response Data and Headers" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
String response = prev.getResponseDataAsString();
vars.put(&quot;response&quot;,response);

vars.put(&quot;responseHeader&quot;, prev.getResponseHeaders());</stringProp>
              <stringProp name="TestPlan.comments"> save response data and response hearder</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="4 ResultOutput" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import java.text.SimpleDateFormat;

JsonObject outputJson = new JsonObject();

String code=prev.getResponseCode();
String requestContent = vars.get(&quot;body&quot;);
String case_result = &quot;&quot;;
String case_message = &quot;&quot;;

if(&quot;200&quot;.equals(code) &amp;&amp; !&quot;&quot;.equals(requestContent) &amp;&amp; !&quot;0&quot;.equals(requestContent) &amp;&amp; requestContent != null){
		case_result = &quot;success&quot;;
		case_message = &quot;messages have been sent&quot;; 
		}else{
			case_result = &quot;failed&quot;;
			case_message = &quot;connection error or no data have been sent&quot;; 
			}

///////////////////////////////////////////////////////////////////////////////////////////////////
////format date///////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
 public static String stampToDate(String s){
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        long lt = new Long(s);
        Date date = new Date(lt);
        res = simpleDateFormat.format(date);
        return res;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
////TO ADD OUT PUT HERE////////////////////////////////////////////////////////////////////////////
String value = String.valueOf(System.currentTimeMillis());
String dateValue = stampToDate(value);
outputJson.addProperty(&quot;Case Name&quot;, vars.get(&quot;name&quot;));
outputJson.addProperty(&quot;Vin&quot;, props.get(&quot;vin&quot;));
outputJson.addProperty(&quot;Request&quot;, vars.get(&quot;body&quot;));
outputJson.addProperty(&quot;Response Code&quot;, prev.getResponseCode());
outputJson.addProperty(&quot;Response Message&quot;, prev.getResponseMessage());
outputJson.addProperty(&quot;Response Data&quot;, prev.getResponseDataAsString());
outputJson.addProperty(&quot;Result&quot;, case_result);
outputJson.addProperty(&quot;Message&quot;, case_message);
outputJson.addProperty(&quot;testTime&quot;, vars.get(&quot;testTime&quot;));
outputJson.addProperty(&quot;@timestamp&quot;, dateValue);

///////////////////////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
public static void writeResult() 
{
	String getdata = outputJson.toString();
	String casename = vars.get(&quot;name&quot;).replaceAll(&quot; &quot;,&quot;&quot;);

	String key = String.valueOf(System.currentTimeMillis());
	String outputPath = vars.get(&quot;outputPath&quot;);
	File dir = new File(outputPath);
	if(dir.exists() == true){
		System.out.println(&quot;dirs is exists&quot;);
	}else{
		dir.mkdirs();
		System.out.println(&quot; created dirs&quot;);
	}

	print(&quot;outputPath=&quot;+outputPath);
	if(outputPath.endsWith(&quot;/&quot;) == false) {
		outputPath = outputPath + &quot;/&quot;;
	}
	String filename = outputPath+casename+&quot;_&quot;+key+&quot;.json&quot;;
	print(&quot;filename=&quot;+filename);
	FileWriter writer;
	        try {
	            writer = new FileWriter(filename);
	            writer.write(getdata);
	            writer.flush();
	            writer.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
}
writeResult();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if run_flag is not false, send FTPGET request" enabled="true">
          <stringProp name="IfController.condition">&quot;${run_flag}&quot; != &quot;FALSE&quot; &amp;&amp; &quot;${run_flag}&quot; != &quot;false&quot; &amp;&amp; &quot;${protocol}&quot; == &quot;FTP&quot; &amp;&amp; &quot;${method}&quot; == &quot;GET&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <FTPSampler guiclass="FtpTestSamplerGui" testclass="FTPSampler" testname="${name}" enabled="true">
            <stringProp name="FTPSampler.server">${host}</stringProp>
            <stringProp name="FTPSampler.port">${port}</stringProp>
            <stringProp name="FTPSampler.filename">${path}</stringProp>
            <stringProp name="FTPSampler.localfilename"></stringProp>
            <stringProp name="FTPSampler.inputdata">${body}</stringProp>
            <boolProp name="FTPSampler.binarymode">false</boolProp>
            <boolProp name="FTPSampler.saveresponse">true</boolProp>
            <boolProp name="FTPSampler.upload">false</boolProp>
            <stringProp name="ConfigTestElement.username">${Username}</stringProp>
            <stringProp name="ConfigTestElement.password">${Password}</stringProp>
          </FTPSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="1 Process Variables in input parameters" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">public static String processVariables(String value) {
	if(value == null || value ==&quot;&quot;||value.trim().length() == 0 ) {
		return &quot;&quot;;
	}

	while(value.contains(&quot;${&quot;) == true) {
		String vPattern = value.substring(value.indexOf(&quot;${&quot;), value.indexOf(&quot;}&quot;, value.indexOf(&quot;${&quot;)) + 1).trim();
		String v = vPattern.substring(2, vPattern.length() - 1).trim();
		String vValue = props.get(v);	
		if(vValue == null){
			vValue = vars.get(v) == null ? &quot;&quot; : vars.get(v);
		}
		vars.put(&quot;vValue&quot;,vValue);
		value = value.substring(0, value.indexOf(vPattern)) + vValue + value.substring(value.indexOf(vPattern) + vPattern.length());	
	}	
	return value;
}



// process &quot;headers&quot;
String headers = vars.get(&quot;headers&quot;);
headers = processVariables(headers);
vars.put(&quot;headers&quot;, headers);

// process &quot;path&quot;
String path = vars.get(&quot;path&quot;);
path = processVariables(path);
vars.put(&quot;path&quot;, path);

// process &quot;host&quot;
String host = vars.get(&quot;host&quot;);
host = processVariables(host);
vars.put(&quot;host&quot;, host);

// process &quot;body&quot;
String body = vars.get(&quot;body&quot;);
body = processVariables(body);
vars.put(&quot;body&quot;, body);

// process &quot;outputs&quot;
String outputs = vars.get(&quot;outputs&quot;);
outputs = processVariables(outputs);
vars.put(&quot;outputs&quot;, outputs);

// process &quot;expected_code&quot;
String expected_code = vars.get(&quot;expected_code&quot;);
expected_code = processVariables(expected_code);
vars.put(&quot;expected_code&quot;, expected_code);

// process &quot;expected_result&quot;
String expected_result = vars.get(&quot;expected_result&quot;);
expected_result = processVariables(expected_result);
vars.put(&quot;expected_result&quot;, expected_result);

// process &quot;constant_timer&quot;
String constant_timer = vars.get(&quot;constant_timer&quot;);
constant_timer = processVariables(constant_timer);
vars.put(&quot;constant_timer&quot;, constant_timer);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="2 Parameters Update" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String headers = vars.get(&quot;headers&quot;);
int hcount = 0;

if(value != &quot;&quot; &amp;&amp; headers.trim().length() != 0){
	String[] headerArray = headers.split(&quot;\n&quot;);
	hcount = headerArray.length;

for (int i = 0; i &lt; headerArray.length; i++) {
	String header = headerArray[i];
	if (header == null || header.trim().length() == 0 ||header ==&quot;&quot;) {
		hcount--;
		continue;
	}

	if(header.indexOf(&quot;:&quot;) == -1){
		hcount--;
		continue;
	}
	String headerName = header.substring(0, header.indexOf(&quot;:&quot;));
	
	String headerValue = &quot;&quot;;
	
	if (header.indexOf(&quot;:&quot;) &lt; header.trim().length() - 1) {
		headerValue = header.substring(header.indexOf(&quot;:&quot;) + 1).trim();
		
	}
	vars.put(headerName,headerValue);

}

//TODO update the logic
}
String method = vars.get(&quot;method&quot;);
if(method != null &amp;&amp; method.trim().length()&gt;0) {
	if(method.equalsIgnoreCase(&quot;get&quot;)) {
		vars.put(&quot;body&quot;, &quot;&quot;);
	} 
}


//outputs

String outputs = vars.get(&quot;outputs&quot;);
int count = 0;
if(outputs != null &amp;&amp; outputs.trim().length()&gt;0) {
	String[] outputsArray = outputs.split(&quot;\n&quot;);
     count = outputsArray.length;
	for (int i = 1; i &lt;= outputsArray.length; i++) {
		String output = outputsArray[i-1];
		if (output == null || output.trim().length() == 0) {
			count--;
			continue;
		}
		vars.put(&quot;output_&quot;+i, output);
	}
}

vars.put(&quot;count&quot;,count.toString());
for(int i=count+1;i&lt;=10;i++) {
	vars.put(&quot;output_&quot;+i, null);
}


</stringProp>
              <stringProp name="TestPlan.comments">Update hearders, body,outputs</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait special time before FTP request" enabled="true">
              <stringProp name="ConstantTimer.delay">${constant_timer}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="3 Save Response Data and Headers" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
String response = prev.getResponseDataAsString();
vars.put(&quot;response&quot;,response);

vars.put(&quot;responseHeader&quot;, prev.getResponseHeaders());</stringProp>
              <stringProp name="TestPlan.comments"> save response data and response hearder</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="4 ResultOutput" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.google.gson.JsonObject;
import java.text.SimpleDateFormat;

JsonObject outputJson = new JsonObject();

String code=prev.getResponseCode();
String requestContent = vars.get(&quot;body&quot;);
String case_result = &quot;&quot;;
String case_message = &quot;&quot;;

if(&quot;200&quot;.equals(code) &amp;&amp; !&quot;&quot;.equals(requestContent) &amp;&amp; !&quot;0&quot;.equals(requestContent) &amp;&amp; requestContent != null){
		case_result = &quot;success&quot;;
		case_message = &quot;messages have been got&quot;; 
		}else{
			case_result = &quot;failed&quot;;
			case_message = &quot;connection error or no data have been sent&quot;; 
			}

///////////////////////////////////////////////////////////////////////////////////////////////////
////format date///////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
 public static String stampToDate(String s){
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        long lt = new Long(s);
        Date date = new Date(lt);
        res = simpleDateFormat.format(date);
        return res;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
////TO ADD OUT PUT HERE////////////////////////////////////////////////////////////////////////////
String value = String.valueOf(System.currentTimeMillis());
String dateValue = stampToDate(value);
outputJson.addProperty(&quot;Case Name&quot;, vars.get(&quot;name&quot;));
outputJson.addProperty(&quot;Vin&quot;, props.get(&quot;vin&quot;));
outputJson.addProperty(&quot;Request&quot;, vars.get(&quot;body&quot;));
outputJson.addProperty(&quot;Response Code&quot;, prev.getResponseCode());
outputJson.addProperty(&quot;Response Message&quot;, prev.getResponseMessage());
outputJson.addProperty(&quot;Response Data&quot;, prev.getResponseDataAsString());
outputJson.addProperty(&quot;Result&quot;, case_result);
outputJson.addProperty(&quot;Message&quot;, case_message);
outputJson.addProperty(&quot;testTime&quot;, vars.get(&quot;testTime&quot;));
outputJson.addProperty(&quot;@timestamp&quot;, dateValue);

///////////////////////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
public static void writeResult() 
{
	String getdata = outputJson.toString();
	String casename = vars.get(&quot;name&quot;).replaceAll(&quot; &quot;,&quot;&quot;);

	String key = String.valueOf(System.currentTimeMillis());
	String outputPath = vars.get(&quot;outputPath&quot;);
	File dir = new File(outputPath);
	if(dir.exists() == true){
		System.out.println(&quot;dirs is exists&quot;);
	}else{
		dir.mkdirs();
		System.out.println(&quot; created dirs&quot;);
	}

	print(&quot;outputPath=&quot;+outputPath);
	if(outputPath.endsWith(&quot;/&quot;) == false) {
		outputPath = outputPath + &quot;/&quot;;
	}
	String filename = outputPath+casename+&quot;_&quot;+key+&quot;.json&quot;;
	print(&quot;filename=&quot;+filename);
	FileWriter writer;
	        try {
	            writer = new FileWriter(filename);
	            writer.write(getdata);
	            writer.flush();
	            writer.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
}
writeResult();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="if run_flag is not false, send API request" enabled="true">
          <stringProp name="IfController.condition">&quot;${run_flag}&quot; != &quot;FALSE&quot; &amp;&amp; &quot;${run_flag}&quot; != &quot;false&quot; &amp;&amp; (&quot;${protocol}&quot; == &quot;HTTP&quot; || &quot;${protocol}&quot; == &quot;http&quot; || &quot;${protocol}&quot; == &quot;HTTPS&quot; || &quot;${protocol}&quot; == &quot;https&quot;) &amp;&amp; &quot;${name}&quot;.startsWith(&quot;${interface}&quot;)</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${name}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${body}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">${method}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">http request for each api in API input data csv file</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="1 Process Variables in input parameters" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">public static String processVariables(String value) {
	if(value == null || value ==&quot;&quot;||value.trim().length() == 0 ) {
		return &quot;&quot;;
	}

//	while (value.contains(&quot;${__P&quot;) == true) {	
//	     String vPattern = value.substring(value.indexOf(&quot;${__P(&quot;),  value.indexOf(&quot;)}&quot;) + 2).trim();
//		String v = vPattern.substring(6, vPattern.length() - 2).trim();
//		String vValue = props.get(v);	
//		vars.put(&quot;vValue&quot;,vValue);
//
//		value = value.substring(0, value.indexOf(vPattern)) + vValue + value.substring(value.indexOf(vPattern) + vPattern.length());
//	}
	while(value.contains(&quot;${&quot;) == true) {
		String vPattern = value.substring(value.indexOf(&quot;${&quot;), value.indexOf(&quot;}&quot;, value.indexOf(&quot;${&quot;)) + 1).trim();
		String v = vPattern.substring(2, vPattern.length() - 1).trim();
		String vValue = props.get(v);	
		if(vValue == null){
			vValue = vars.get(v) == null ? &quot;&quot; : vars.get(v);
		}
		vars.put(&quot;vValue&quot;,vValue);
//		String vValue = vars.get(v) == null ? &quot;&quot; : vars.get(v);
		value = value.substring(0, value.indexOf(vPattern)) + vValue + value.substring(value.indexOf(vPattern) + vPattern.length());	
	}	
	return value;
}

// process &quot;headers&quot;
String headers = vars.get(&quot;headers&quot;);
headers = processVariables(headers);
vars.put(&quot;headers&quot;, headers);

// process &quot;path&quot;
String path = vars.get(&quot;path&quot;);
path = processVariables(path);
vars.put(&quot;path&quot;, path);

// process &quot;host&quot;
String host = vars.get(&quot;host&quot;);
host = processVariables(host);
vars.put(&quot;host&quot;, host);

// process &quot;body&quot;
String body = vars.get(&quot;body&quot;);
body = processVariables(body);
vars.put(&quot;body&quot;, body);

// process &quot;outputs&quot;
String outputs = vars.get(&quot;outputs&quot;);
outputs = processVariables(outputs);
vars.put(&quot;outputs&quot;, outputs);

// process &quot;expected_code&quot;
String expected_code = vars.get(&quot;expected_code&quot;);
expected_code = processVariables(expected_code);
vars.put(&quot;expected_code&quot;, expected_code);

// process &quot;expected_result&quot;
String expected_result = vars.get(&quot;expected_result&quot;);
expected_result = processVariables(expected_result);
vars.put(&quot;expected_result&quot;, expected_result);

// process &quot;outputs&quot;
//String outputs = vars.get(&quot;outputs_header&quot;);
//outputs_header = processVariables(outputs);
//vars.put(&quot;outputs_header&quot;, outputs_header);

// process &quot;constant_timer&quot;
String constant_timer = vars.get(&quot;constant_timer&quot;);
constant_timer = processVariables(constant_timer);
vars.put(&quot;constant_timer&quot;, constant_timer);</stringProp>
              <stringProp name="TestPlan.comments">process all variables in input parameters</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="2 Parameters Update" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">String headers = vars.get(&quot;headers&quot;);
int hcount = 0;

if(value != &quot;&quot; &amp;&amp; headers.trim().length() != 0){
	String[] headerArray = headers.split(&quot;\n&quot;);
	hcount = headerArray.length;

for (int i = 0; i &lt; headerArray.length; i++) {
	String header = headerArray[i];
	if (header == null || header.trim().length() == 0 ||header ==&quot;&quot;) {
		hcount--;
		continue;
	}

	if(header.indexOf(&quot;:&quot;) == -1){
		hcount--;
		continue;
	}
	String headerName = header.substring(0, header.indexOf(&quot;:&quot;));
	
	String headerValue = &quot;&quot;;
	
	if (header.indexOf(&quot;:&quot;) &lt; header.trim().length() - 1) {
		headerValue = header.substring(header.indexOf(&quot;:&quot;) + 1).trim();
		
	}
	vars.put(&quot;header&quot;+i+&quot;_key&quot;, headerName);
	vars.put(&quot;header&quot;+i+&quot;_value&quot;, headerValue);	

}

//TODO update the logic
}
for(int i=hcount;i&lt;=30;i++) {
	vars.put(&quot;header&quot;+i+&quot;_key&quot;, &quot;Connection&quot;);
	vars.put(&quot;header&quot;+i+&quot;_value&quot;, &quot;keep-alive&quot;);
}


String method = vars.get(&quot;method&quot;);
if(method != null &amp;&amp; method.trim().length()&gt;0) {
	if(method.equalsIgnoreCase(&quot;get&quot;)) {
		vars.put(&quot;body&quot;, &quot;&quot;);
	} 
}


//outputs

String outputs = vars.get(&quot;outputs&quot;);
int count = 0;
if(outputs != null &amp;&amp; outputs.trim().length()&gt;0) {
	String[] outputsArray = outputs.split(&quot;\n&quot;);
     count = outputsArray.length;
	for (int i = 1; i &lt;= outputsArray.length; i++) {
		String output = outputsArray[i-1];
		if (output == null || output.trim().length() == 0) {
			count--;
			continue;
		}
		vars.put(&quot;output_&quot;+i, output);
	}
}

vars.put(&quot;count&quot;,count.toString());
for(int i=count+1;i&lt;=10;i++) {
	vars.put(&quot;output_&quot;+i, null);
}


</stringProp>
              <stringProp name="TestPlan.comments">Update hearders, body,outputs</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait special time before api request" enabled="true">
              <stringProp name="ConstantTimer.delay">${constant_timer}</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Request Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header0_key}</stringProp>
                  <stringProp name="Header.value">${header0_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header1_key}</stringProp>
                  <stringProp name="Header.value">${header1_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header2_key}</stringProp>
                  <stringProp name="Header.value">${header2_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header3_key}</stringProp>
                  <stringProp name="Header.value">${header3_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header4_key}</stringProp>
                  <stringProp name="Header.value">${header4_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header5_key}</stringProp>
                  <stringProp name="Header.value">${header5_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header6_key}</stringProp>
                  <stringProp name="Header.value">${header6_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header7_key}</stringProp>
                  <stringProp name="Header.value">${header7_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header8_key}</stringProp>
                  <stringProp name="Header.value">${header8_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header9_key}</stringProp>
                  <stringProp name="Header.value">${header9_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header10_key}</stringProp>
                  <stringProp name="Header.value">${header10_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header11_key}</stringProp>
                  <stringProp name="Header.value">${header11_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header12_key}</stringProp>
                  <stringProp name="Header.value">${header12_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header13_key}</stringProp>
                  <stringProp name="Header.value">${header13_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header14_key}</stringProp>
                  <stringProp name="Header.value">${header14_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header15_key}</stringProp>
                  <stringProp name="Header.value">${header15_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header16_key}</stringProp>
                  <stringProp name="Header.value">${header16_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header17_key}</stringProp>
                  <stringProp name="Header.value">${header17_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header18_key}</stringProp>
                  <stringProp name="Header.value">${header18_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header19_key}</stringProp>
                  <stringProp name="Header.value">${header19_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header20_key}</stringProp>
                  <stringProp name="Header.value">${header20_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header21_key}</stringProp>
                  <stringProp name="Header.value">${header21_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header22_key}</stringProp>
                  <stringProp name="Header.value">${header22_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header23_key}</stringProp>
                  <stringProp name="Header.value">${header23_value}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">${header24_key}</stringProp>
                  <stringProp name="Header.value">${header24_value}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="3 Save Response Data and Headers" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
String response = prev.getResponseDataAsString();
vars.put(&quot;response&quot;,response);

vars.put(&quot;responseHeader&quot;, prev.getResponseHeaders());</stringProp>
              <stringProp name="TestPlan.comments"> save response data and response hearder</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="4 ResultOutput" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.text.SimpleDateFormat;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import java.util.*;
import java.io.*;
import com.ibm.json.JsonUtil;
import com.ibm.json.JsonResult;

JsonObject outputJson = new JsonObject();


///////////////////////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
 public static String stampToDate(String s){
        String res;
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);
        long lt = new Long(s);
        Date date = new Date(lt);
        res = simpleDateFormat.format(date);
        return res;
}
///////////////////////////////////////////////////////////////////////////////////////////////////
////TO ADD OUT PUT HERE////////////////////////////////////////////////////////////////////////////

String value = String.valueOf(System.currentTimeMillis());
String dateValue = stampToDate(value);
outputJson.addProperty(&quot;Case Name&quot;, vars.get(&quot;name&quot;));
outputJson.addProperty(&quot;Url&quot;, prev.getUrlAsString());
outputJson.addProperty(&quot;Method&quot;, vars.get(&quot;method&quot;));
outputJson.addProperty(&quot;Request Body&quot;, vars.get(&quot;body&quot;));
outputJson.addProperty(&quot;Request Header&quot;, vars.get(&quot;headers&quot;));
outputJson.addProperty(&quot;Response Code&quot;, prev.getResponseCode());
outputJson.addProperty(&quot;Response Header&quot;, prev.getResponseHeaders());
outputJson.addProperty(&quot;Response Data&quot;, prev.getResponseDataAsString());
outputJson.addProperty(&quot;Expected Code&quot;, vars.get(&quot;expected_code&quot;));
outputJson.addProperty(&quot;Expected Result&quot;, vars.get(&quot;expected_result&quot;));
outputJson.addProperty(&quot;testTime&quot;, vars.get(&quot;testTime&quot;));
outputJson.addProperty(&quot;@timestamp&quot;, dateValue);
outputJson.addProperty(&quot;userName&quot;, vars.get(&quot;userName&quot;));
/////////////////api execution result
String expected_code = vars.get(&quot;expected_code&quot;);
String expected_result = vars.get(&quot;expected_result&quot;);
Boolean flag = false;
if(expected_code ==&quot;&quot; &amp;&amp; expected_result ==&quot;&quot;)
{
	outputJson.addProperty(&quot;Status&quot;, prev.isResponseCodeOK()?&quot;success&quot;:&quot;error&quot;);
	JsonObject detailJson = new JsonObject();
	if(prev.isResponseCodeOK()){
		detailJson.addProperty(&quot;returnCode&quot;,  &quot;0&quot;);
		detailJson.addProperty(&quot;returnMessage&quot;,  &quot;API response codes is ok&quot;);
	} else {
		detailJson.addProperty(&quot;returnCode&quot;,  &quot;1&quot;);
		detailJson.addProperty(&quot;returnMessage&quot;,  &quot;API response codes is not ok&quot;);
	}
	
	detailJson.addProperty(&quot;responseCode&quot;, prev.getResponseCode());
	detailJson.addProperty(&quot;apiMessage&quot;,  prev.getResponseMessage());
	
	outputJson.add(&quot;Results&quot;, detailJson);
	outputJson.addProperty(&quot;Result Details&quot;, detailJson.toString());
	
}
else if(expected_code !=&quot;&quot; &amp;&amp; expected_result ==&quot;&quot;)
{
	flag = expected_code.equals(prev.getResponseCode());
	outputJson.addProperty(&quot;Status&quot;, flag?&quot;success&quot;:&quot;error&quot;);
	
	JsonObject detailJson = new JsonObject();
	if(flag){
		detailJson.addProperty(&quot;returnCode&quot;,  &quot;2&quot;);
		detailJson.addProperty(&quot;returnMessage&quot;,  &quot;Response Codes are matching&quot;);
	}
	else {
		detailJson.addProperty(&quot;returnCode&quot;,  &quot;3&quot;);
		detailJson.addProperty(&quot;returnMessage&quot;, &quot;Response Codes are mismatch&quot;);
	}
	 detailJson.addProperty(&quot;expectedCode&quot;, expected_code);
      detailJson.addProperty(&quot;responseCode&quot;, prev.getResponseCode());
      
	outputJson.add(&quot;Results&quot;, detailJson);
	outputJson.addProperty(&quot;Result Details&quot;, detailJson.toString());
	
}
else{
	Map map = JsonUtil.compare(vars.get(&quot;expected_result&quot;), prev.getResponseDataAsString());
	JsonArray resultArray = new JsonArray();
	String details = &quot;&quot;;
	if(expected_code ==&quot;&quot;) {
		outputJson.addProperty(&quot;Status&quot;,  map.get(&quot;result&quot;));
	}
	else {
		flag = expected_code.equals(prev.getResponseCode());
		  JsonObject detailJson = new JsonObject();
		 
		if(!flag){
			outputJson.addProperty(&quot;Status&quot;, flag?&quot;success&quot;:&quot;error&quot;);
			detailJson.addProperty(&quot;returnCode&quot;,  &quot;3&quot;);
			detailJson.addProperty(&quot;returnMessage&quot;, &quot;Response Codes are mismatch&quot;);	
		}
		else{
			outputJson.addProperty(&quot;Status&quot;,  map.get(&quot;result&quot;));
			detailJson.addProperty(&quot;returnCode&quot;,  &quot;2&quot;);
			detailJson.addProperty(&quot;returnMessage&quot;,  &quot;Response Codes are matching&quot;);
				
		}
		detailJson.addProperty(&quot;expectedCode&quot;, expected_code);
      	detailJson.addProperty(&quot;responseCode&quot;, prev.getResponseCode());
      	resultArray.add(detailJson);
      	details = detailJson.toString();
	}

	if(map.get(&quot;resultMsg&quot;) != null){
		JsonObject detailJson = new JsonObject();
		detailJson.addProperty(&quot;returnCode&quot;,  &quot;8&quot;);
          detailJson.addProperty(&quot;returnMessage&quot;,  map.get(&quot;resultMsg&quot;));
           resultArray.add(detailJson);
		details += detailJson.toString();
	
	} else {
	List list = map.get(&quot;resultList&quot;);
	
	for( int i = 0 ; i &lt; list.size() ; i++) {
        	 JsonObject detailJson = new JsonObject();
            JsonResult resultSet = (JsonResult)list.get(i);   
            detailJson.addProperty(&quot;jsonPath&quot;,  resultSet.getJsonPath());
            detailJson.addProperty(&quot;returnCode&quot;,  resultSet.getReturnCode());
            detailJson.addProperty(&quot;returnMessage&quot;,  resultSet.getReturnMessage());
            detailJson.addProperty(&quot;expectedResult&quot;,   resultSet.getExpValue());
   		  detailJson.addProperty(&quot;apiResult&quot;,   resultSet.getApiValue() );
   		  resultArray.add(detailJson);
   		  details += detailJson.toString();
             
        }
	}
	outputJson.add(&quot;Results&quot;, resultArray);
	outputJson.addProperty(&quot;Result Details&quot;, details);
}
//Map map = JsonUtil.compare(vars.get(&quot;expected_result&quot;), prev.getResponseHeaders());
//Map map = JsonUtil.compare(vars.get(&quot;expected_result&quot;), prev.getResponseDataAsString());


///////////////////////////////////////////////////////////////////////////////////////////////////
////DO NOT MODIFY THE CODE BELOW///////////////////////////////////////////////////////////////////
public static void writeResult() 
{
	String getdata = outputJson.toString();
	String casename = vars.get(&quot;name&quot;).replaceAll(&quot; &quot;,&quot;&quot;);

	String key = String.valueOf(System.currentTimeMillis());
	String outputPath = vars.get(&quot;outputPath&quot;);
	if(outputPath.endsWith(&quot;/&quot;) == false) {
		outputPath = outputPath + &quot;/&quot;;
	}
	String filename = outputPath+casename+&quot;_&quot;+key+&quot;.json&quot;;
	File file = new File(filename);
	File fileParent = file.getParentFile();
        // 创建文件
     if(!fileParent.exists()){  
    		fileParent.mkdirs();  
	} 
	
     file.createNewFile();
	FileWriter writer;
	        try {
	            writer = new FileWriter(file);
	            writer.write(getdata);
	            writer.flush();
	            writer.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
}
writeResult();

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (api has outputs info)" enabled="true">
            <stringProp name="IfController.condition">&quot;${count}&quot; != 0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">output</stringProp>
              <stringProp name="ForeachController.returnVal">outVar</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
              <stringProp name="TestPlan.comments">Extract value from api reponse</stringProp>
            </ForeachController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="process output path" enabled="true">
                <stringProp name="BeanShellSampler.query">String outVar = vars.get(&quot;outVar&quot;);
int i = outVar.indexOf(&quot;:&quot;);
vars.put(&quot;outValue&quot;,null);
if(i==-1){
	vars.put(&quot;outputvar&quot;, null);
	vars.put(&quot;outputpath&quot;, null);
}
else {
	String Name = outVar.substring(0, outVar.indexOf(&quot;:&quot;)).trim();
	String Value =&quot;&quot;;
		
	if (outVar.indexOf(&quot;:&quot;) &lt;= outVar.trim().length() - 1) {
		Value = outVar.substring(outVar.indexOf(&quot;:&quot;) + 1).trim();
	}
	
	if(Name==&quot;&quot; ||Value==&quot;&quot;){
		vars.put(&quot;outputvar&quot;, null);
		vars.put(&quot;outputpath&quot;, null);
	} else {
//		String vName= vars.get(&quot;name&quot;)+&quot;_&quot;+Name;
		vars.put(&quot;outputvar&quot;, Name);
		vars.put(&quot;outputpath&quot;, Value);
	}
}
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor value from response data" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">outValue</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">${outputpath}</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="TestPlan.comments">Extractor value from response data</stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">response</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="process output value " enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">${__setProperty(${outputvar},${outValue},)}

</stringProp>
                <stringProp name="TestPlan.comments">Save value as global variable</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(no value found from response data)" enabled="true">
                <stringProp name="IfController.condition">&quot;${outValue}&quot; == null || &quot;${outValue}&quot; ==&quot;&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="TestPlan.comments">if no sampler, extractor will not run</stringProp>
                  <stringProp name="BeanShellSampler.query">//</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor value from response hearder" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">outValue</stringProp>
                  <stringProp name="RegexExtractor.regex">${outputpath}</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="TestPlan.comments">Extractor value from response hearder</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">responseHeader</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="process output value " enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">${__setProperty(${outputvar},${outValue},)}

</stringProp>
                  <stringProp name="TestPlan.comments">Save value as global variable</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
